<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.longfor.longjian.measure.dao.zhijian2.MeasureZoneResultMapper" >
  <resultMap id="BaseResultMap" type="com.longfor.longjian.measure.po.zhijian2.MeasureZoneResult" >
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="project_id" property="projectId" jdbcType="INTEGER" />
    <result column="area_id" property="areaId" jdbcType="INTEGER" />
    <result column="area_path_and_id" property="areaPathAndId" jdbcType="VARCHAR" />
    <result column="category_key" property="categoryKey" jdbcType="VARCHAR" />
    <result column="category_path_and_key" property="categoryPathAndKey" jdbcType="VARCHAR" />
    <result column="close_status" property="closeStatus" jdbcType="INTEGER" />
    <result column="list_id" property="listId" jdbcType="INTEGER" />
    <result column="ok_total" property="okTotal" jdbcType="INTEGER" />
    <result column="region_uuid" property="regionUuid" jdbcType="VARCHAR" />
    <result column="rule_id" property="ruleId" jdbcType="INTEGER" />
    <result column="score" property="score" jdbcType="REAL" />
    <result column="squad_id" property="squadId" jdbcType="INTEGER" />
    <result column="total" property="total" jdbcType="INTEGER" />
    <result column="uuid" property="uuid" jdbcType="VARCHAR" />
    <result column="zone_uuid" property="zoneUuid" jdbcType="VARCHAR" />
    <result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
    <result column="update_at" property="updateAt" jdbcType="TIMESTAMP" />
    <result column="delete_at" property="deleteAt" jdbcType="TIMESTAMP" />
    <result column="data" property="data" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.longfor.longjian.measure.po.zhijian2.MeasureZoneResult" extends="BaseResultMap" >
    <!--
      WARNING - @mbg.generated
    -->
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbg.generated
    -->
    id, project_id, area_id, area_path_and_id, category_key, category_path_and_key, close_status, 
    list_id, ok_total, region_uuid, rule_id, score, squad_id, total, uuid, zone_uuid, 
    create_at, update_at, delete_at,`data`
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbg.generated
    -->
    data
  </sql>

  <select id="statMeasureListZoneResultCountByListIdGroupBySquad" resultType="map">
    SELECT
    count( mzr.id ) AS count,
    mzr.squad_id AS squadId
    FROM
    measure_zone_result mzr
    WHERE
    mzr.list_id = #{listId}
    AND mzr.delete_at IS NULL
    GROUP BY
    mzr.squad_id
  </select>

  <select id="statMearureZoneResultSquadTotalCountByListIdCategoryKey" resultType="map">
    SELECT
    squad_id AS squadId,
    count(*) AS count,
    SUM(total) AS total_sum,
    SUM(ok_total) AS ok_total_sum,
    SUM(ok_total) / SUM(total) AS pass_percent
    FROM
    measure_zone_result
    WHERE
    delete_at IS NULL
    AND list_id = #{listId}
    <if test="categoryKey != null and categoryKey != ''">
      AND category_path_and_key like concat('%',#{categoryKey},'%')
    </if>
    GROUP BY squad_id
  </select>

  <select id="statMearureZoneResultSquadTotalCountByListIdGroupByCategoryKey" resultType="map">
    SELECT
    squad_id AS squadId,
    category_key AS categoryKey,
    count(*) AS count,
    SUM(total) AS total_sum,
    SUM(ok_total) AS ok_total_sum,
    SUM(ok_total) / SUM(total) AS pass_percent
    FROM
    measure_zone_result
    WHERE
    delete_at IS NULL
    AND list_id = #{listId}
    GROUP BY
    squad_id,category_key
  </select>

  <select id="getPassPercentDiffCategoryKeyListByMeasureListId" resultType="map">
    SELECT
    MAX(pass_percent) - MIN(pass_percent) AS diff,
    COUNT(*) AS squad_count,
    category_key,
    category_path_and_key
    FROM
    (
    SELECT
    ok_total,
    total,
    SUM(ok_total) / SUM(total) AS pass_percent,
    squad_id,
    category_key,
    category_path_and_key
    FROM
    measure_zone_result
    WHERE
    list_id = #{listId}
    AND (
    `delete_at` IS NULL
    OR `delete_at` = '0001-01-01 00:00:00'
    )
    AND (
    `delete_at` IS NULL
    OR `delete_at` = '0001-01-01 00:00:00'
    )
    GROUP BY
    squad_id,
    category_key
    ) AS t
    GROUP BY
    category_key
    HAVING
    squad_count > 1
    ORDER BY
    diff DESC
  </select>

  <select id="getSquadsZoneResultPassPercentByListIdAndCategoryKey" resultType="map">
    SELECT
    ok_total,
    total,
    SUM(ok_total) / SUM(total) AS pass_percent,
    squad_id
    FROM
    measure_zone_result
    WHERE
    (
    `delete_at` IS NULL
    OR `delete_at` = '0001-01-01 00:00:00'
    )
    AND zone_uuid IN (
    SELECT
    uuid
    FROM
    measure_zone
    WHERE
    list_id = #{listId}
    AND close_status &lt;&gt; #{CLOSEDCODE}
    AND category_key = #{categoryKey}
    AND (
    `delete_at` IS NULL
    OR `delete_at` = '0001-01-01 00:00:00'
    )
    )
    GROUP BY
    squad_id
  </select>

  <select id="getSquadPassPercentSmallestCategoryKeyListByMeasureListId" resultType="map">
    SELECT
    ok_total,
    total,
    SUM(ok_total) / SUM(total) AS pass_percent,
    squad_id,
    category_key,
    category_path_and_key
    FROM
    measure_zone_result
    WHERE
    list_id = #{listId}
    AND (
    `delete_at` IS NULL
    OR `delete_at` = '0001-01-01 00:00:00'
    )
    GROUP BY
    squad_id,
    category_key
    ORDER BY
    squad_id,
    pass_percent ASC
  </select>

  <select id="getSubActiveMeasureCategoryZonesByListIdCategoryKey" resultMap="BaseResultMap">
    SELECT DISTINCT
    category_path_and_key
    FROM
    measure_zone_result
    WHERE
    list_id = #{listId}
    <if test="categoryKey != null and categoryKey != ''">
      AND category_key like concat('%',#{categoryKey},'%')
    </if>
    AND delete_at IS NULL
  </select>

  <select id="getMeasureZoneResultPassPercentageByListIdsAndCategoryKeyAndAreaId" resultType="map">
SELECT
	SUM( total ) AS total,
	SUM( ok_total ) AS ok_total
FROM
	measure_zone_result
WHERE
	delete_at IS NULL
	AND list_id IN
    <foreach collection="listIds" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
	AND category_path_and_key LIKE concat('%/',#{key},'/%')
	AND area_path_and_id LIKE concat('%/',#{areaId},'/%')
  </select>

  <select id="countMeasureZoneByListIdsAndCategoryKeyAndAreaId" resultType="int">
    SELECT
    count( id )
    FROM
    measure_zone_result
    WHERE
    delete_at IS NULL
    AND list_id in
    <foreach collection="listIds" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    AND category_path_and_key LIKE concat('%/',#{categoryKey},'/%')
    AND area_path_and_id LIKE concat('%/',#{areaId},'/%')
    AND project_id = #{projectId}
  </select>

  <select id="searchResultUnscopedByListIdLastIdUpdateAtGt" resultMap="BaseResultMap">
    SELECT
    <include refid = "Base_Column_List" />
    FROM
    measure_zone_result
    WHERE
    project_id = #{projectId}
    AND list_id = #{listId}
    AND id > #{lastId}
    <if test = "timestamp != null and timestamp >= 0" >
      AND update_at > FROM_UNIXTIME(#{timestamp} )
    </if>
    <if test = "limit != 0" >
      ORDER BY
      id ASC
      LIMIT #{start},#{limit}
    </if>
  </select>


  <select id="getCountResultUnscopedByListIdLastIdUpdateAtGt" resultType="int">
    SELECT
    count( id )
    FROM
    measure_zone_result
    WHERE
    list_id = #{listId}
    <if test = "timestamp != null and timestamp >= 0" >
      AND update_at > FROM_UNIXTIME(#{timestamp} )
    </if>
  </select>

  <select id="getByProjIdListIdZoneUuidSquadId" resultMap="BaseResultMap">
SELECT
	<include refid="Base_Column_List"/>
FROM
	measure_zone_result
WHERE
	list_id = #{listId}
	AND zone_uuid = #{zoneUuid}
	AND squad_id = #{squadId}
	AND project_id = #{projectId}
	AND delete_at is null;
  </select>

  <select id="getByUuid" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    measure_zone_result
    WHERE
    uuid = #{uuid}
    AND project_id = #{projId}
    AND delete_at is null;
  </select>

  <update id="delByUuidList">

    UPDATE measure_zone_result set delete_at=#{delete_at},update_at=#{update_at}

    where  project_id = #{project_id}

    and  zone_uuid IN
    <foreach collection="zoneId" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>

  </update>


  <update id="delBySquadIdUuid">

    UPDATE measure_zone_result set delete_at=#{delete_at},update_at=#{update_at}

    where  project_id = #{project_id}

    <if test="squadId!=null and squadId!=''">
       and squad_id = #{squadId}
    </if>

    and  zone_uuid IN
    <foreach collection="zoneId" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>

  </update>

  <select id="SearchZoneResultByProjIdZoneUuid" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    measure_zone_result
    WHERE
    project_id = #{ProjectId}
    AND
    zone_uuid = #{uuid}
    and  delete_at is null
  </select>

</mapper>